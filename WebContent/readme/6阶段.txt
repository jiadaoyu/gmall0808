1、在项目中使用Filter
	对访问目标资源的请求进行拦截
	1.1 对访问OrderClientServlet的所有请求进行登录验证
	
	
	1.2 对所有的访问当前项目的请求设置编码格式[解决 post请求乱码+响应乱码]


	1.3 统一事务处理
		事务：
			多个sql操作，如果希望一起成功或者一起失败，可以看做是一个整体，也就是一个事务
		数据库使用事务时：
			多个sql操作必须使用同一个数据库连接
			conn.setAutoCommit(false);//设置不自动提交
			//执行多个sql操作
			//如果没有异常
			conn.commit();
			//如果有异常
			conn.rollback();
			通过连接开始事务
			通过连接提交或回滚事务
		解决：
			保证多个sql操作使用的是同一个数据库连接
		我们可以在每个请求进入项目时 给当前正在执行的线程对象绑定一个数据库连接[在本次线程执行过程中所有经过的的java类中都可以获取到当前的线程对象]
		需要使用数据库连接时，直接通过当前线程对象获取即可
		
		
		创建TransactionFilter统一处理事务
		
		
		
		问题1：java.sql.SQLException: connection holder is null
			原因：  访问首页数据时，一个请求执行了两次sql，第一次sql查询数量成功之后将数据库连接释放了，第二次使用时获取的连接对象不是null，但是连接不可用
			解决：数据库连接释放统一在TransactionFilter中关闭
		问题2：事务仍然没有其作用   异常跑出来，但是被BaseServlet捕获了，响应体中没有任何内容页面显示白板
			原因：所有的代码执行的异常都统一交给TransactionFilter处理
				filter根据异常决定提交还是回滚
			解决：所有异常都向上抛，最终抛给filter
		问题3： 页面出现500
			原因： BaseServlet中将出现的异常抛出给TransactionFilter之后出现的
				服务器有异常没有被处理
				filter中捕获的是sql异常
			解决：filter捕获Exception
		问题4：处理了事务后，所有的异常都交给Filter处理，注册失败时也会抛出异常，如果交给filter会跳转到错误页面
			但是我们希望注册失败后跳转到注册页面
			解决：类似于这样的异常我们可以单独捕获处理		
	步骤：
		1、创建TransactionFilter，拦截所有的访问当前项目的请求，将每个请求看做是一个事务
		2、修改JDBCUtils的getConn方法[给线程对象绑定连接：  第一次绑定，以后根据线程对象获取 ]
			添加关闭数据库连接的方法：移除线程对象绑定的数据库连接
		3、BaseDao中的所有的sql操作 都不能关闭数据库连接，所有的异常都转为运行时异常抛出
		
		4、BaseServlet中的异常也需要抛出		
			
			
2、在项目中使用AJAX

	2.1 首页：
		用户点击加入购物车时，页面只需要刷新  添加的图书标题以及购物车的商品数量，没有必要刷新整个额页面
		点击加入购物车时  可以通过js 发送ajax请求给服务器，服务器只响应 页面需要的数据然后再通过ajax dom操作局部刷新页面
	2.2 cart.jsp
		用户修改购物项数量时  只有少量数据修改了  也可以通过ajax优化
		数量的input 监听到内容改变时  应该通过js 发送ajax请求
	2.3 注册页面 用户输入完用户名后可以验证用户名是否可用	
		- 输入注册用户名的input绑定内容改变监听
		- 内容改变获取注册账号提交给UserServlet.checkUsername() 处理
		- boolean UserService.checkUsername(String username);
		- User UserDao.getUserByUsername(String username);	//返回的用户对象不为空，代表用户名已被占用， 是空代表用户名可用
	


